from autohive_integrations_sdk import (
    Integration, ExecutionContext, ActionHandler
)
from typing import Dict, Any, List, Optional
from pathlib import Path
from io import BytesIO
import base64

# ReportLab for creation
from reportlab.platypus import SimpleDocTemplate, Paragraph, Table, Image, PageBreak
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.pagesizes import LETTER, A4
from reportlab.pdfgen import canvas as rl_canvas

# pypdf for manipulation
from pypdf import PdfReader, PdfWriter


pdf_creator = Integration.load(config_path=Path(__file__).resolve().parent / "config.json")


def _page_size_from_str(s: str):
    return LETTER if (s or "LETTER").upper() == "LETTER" else A4


def _header_footer_factory(header_text: str, footer_text: str, pagesize):
    def _callback(c, doc):
        c.saveState()
        c.setFont("Helvetica", 9)
        w, h = pagesize
        if header_text:
            c.drawString(40, h - 40, header_text)
        if footer_text:
            c.drawString(40, 30, footer_text)
        c.drawRightString(w - 40, 30, f"Page {doc.page}")
        c.restoreState()
    return _callback


def _build_pdf_bytes(
    title: str,
    table_data: Optional[List[List[str]]],
    image_bytes: Optional[bytes],
    header_text: str,
    footer_text: str,
    pagesize,
) -> bytes:
    buf = BytesIO()
    doc = SimpleDocTemplate(buf, pagesize=pagesize)
    styles = getSampleStyleSheet()

    story: List[Any] = []
    story.append(Paragraph(title, styles["Title"]))

    if table_data:
        story.append(Table(table_data, hAlign="LEFT"))

    if image_bytes:
        img_buf = BytesIO(image_bytes)
        # ReportLab's Image can take a file-like object
        story.append(Image(img_buf, width=300, height=180))

    # Add a second page example for demonstration
    story.append(PageBreak())
    story.append(Paragraph("Generated by Autohive pdf-creator", styles["Heading2"]))

    cb = _header_footer_factory(header_text, footer_text, doc.pagesize)
    doc.build(story, onFirstPage=cb, onLaterPages=cb)

    return buf.getvalue()


def _create_watermark_pdf(watermark_text: str, pagesize) -> BytesIO:
    buf = BytesIO()
    c = rl_canvas.Canvas(buf, pagesize=pagesize)
    c.saveState()
    c.setFillGray(0.5, 0.4)  # gray with alpha
    c.setFont("Helvetica-Bold", 60)
    w, h = pagesize
    c.translate(w / 2, h / 2)
    c.rotate(45)
    c.drawCentredString(0, 0, watermark_text)
    c.restoreState()
    c.save()
    buf.seek(0)
    return buf


@pdf_creator.action("create_pdf")
class CreatePDFAction(ActionHandler):
    async def execute(self, inputs: Dict[str, Any], context: ExecutionContext):
        title: str = inputs["title"]
        table_data: Optional[List[List[str]]] = inputs.get("table_data")
        header_text: str = inputs.get("header_text", "")
        footer_text: str = inputs.get("footer_text", "")
        page_size_name: str = inputs.get("page_size", "LETTER")
        pagesize = _page_size_from_str(page_size_name)

        # Image: prefer base64, else fetch from URL if provided
        image_bytes: Optional[bytes] = None
        if inputs.get("image_base64"):
            try:
                image_bytes = base64.b64decode(inputs["image_base64"], validate=True)
            except Exception as e:
                raise Exception(f"Invalid image_base64: {e}")
        elif inputs.get("image_url"):
            try:
                resp = await context.fetch(inputs["image_url"])  # SDK returns bytes or content
                # The SDK's fetch returns content; if it's dict, try to get content; else assume bytes
                if isinstance(resp, (bytes, bytearray)):
                    image_bytes = bytes(resp)
                elif isinstance(resp, dict) and "content" in resp:
                    # If SDK returns a dict with content, try reading bytes
                    content = resp["content"]
                    image_bytes = content.encode("latin1") if isinstance(content, str) else content
                else:
                    # best effort; ignore if not bytes
                    image_bytes = None
            except Exception as e:
                # Non-fatal: proceed without image
                image_bytes = None

        pdf_bytes = _build_pdf_bytes(
            title=title,
            table_data=table_data,
            image_bytes=image_bytes,
            header_text=header_text,
            footer_text=footer_text,
            pagesize=pagesize,
        )

        pages = len(PdfReader(BytesIO(pdf_bytes)).pages)
        return {
            "pdf_base64": base64.b64encode(pdf_bytes).decode("ascii"),
            "pages": pages,
        }


@pdf_creator.action("update_pdf")
class UpdatePDFAction(ActionHandler):
    async def execute(self, inputs: Dict[str, Any], context: ExecutionContext):
        src_b64: str = inputs["pdf_base64"]
        watermark_text: Optional[str] = inputs.get("watermark_text")
        append_text: Optional[str] = inputs.get("append_text")

        try:
            src_bytes = base64.b64decode(src_b64, validate=True)
        except Exception as e:
            raise Exception(f"Invalid pdf_base64: {e}")

        reader = PdfReader(BytesIO(src_bytes))
        writer = PdfWriter()

        # Derive pagesize from first page mediabox (approximate to LETTER if unknown)
        if len(reader.pages) > 0:
            first = reader.pages[0]
            w = float(first.mediabox.width)
            h = float(first.mediabox.height)
            pagesize = (w, h)
        else:
            pagesize = LETTER

        wm_page = None
        if watermark_text:
            wm_pdf = _create_watermark_pdf(watermark_text, pagesize)
            wm_page = PdfReader(wm_pdf).pages[0]

        for page in reader.pages:
            if wm_page is not None:
                page.merge_page(wm_page)
            writer.add_page(page)

        if append_text:
            # Create a simple appended page using ReportLab
            buf = BytesIO()
            c = rl_canvas.Canvas(buf, pagesize=pagesize)
            c.setFont("Helvetica", 12)
            c.drawString(72, pagesize[1] - 72, append_text)
            c.save()
            buf.seek(0)
            append_page = PdfReader(buf).pages[0]
            writer.add_page(append_page)

        out = BytesIO()
        writer.write(out)
        out_bytes = out.getvalue()

        pages = len(PdfReader(BytesIO(out_bytes)).pages)
        return {
            "pdf_base64": base64.b64encode(out_bytes).decode("ascii"),
            "pages": pages,
        }
