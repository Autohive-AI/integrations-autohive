const { executeAction } = require('../slide_maker');
const fs = require('fs');
const path = require('path');

// Ensure output directory exists
const outputDir = path.join(__dirname, 'output');
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true });
}

async function testGenerateQuarterlyReports() {
  console.log('Test 1: Generate quarterly sales reports (Power Feature)...');

  // First, create a presentation with master slide
  console.log('  - Creating initial presentation with master...');
  const createInputs = {
    title: 'Quarterly Sales Reports',
    author: 'Sales Team',
    master: {
      title: 'SALES_MASTER',
      background: { color: 'FFFFFF' },
      objects: [
        {
          rect: {
            x: 0,
            y: 0,
            w: '100%',
            h: 0.8,
            fill: { color: '0066CC' }
          }
        },
        {
          text: {
            text: 'Sales Report',
            options: {
              x: 0.5,
              y: 0.2,
              w: 4,
              h: 0.4,
              fontSize: 24,
              bold: true,
              color: 'FFFFFF'
            }
          }
        }
      ]
    },
    slides: [
      {
        markdown: '# Quarterly Sales Reports\n\n## 2024 Performance Overview\n\nGenerated by AI Agent'
      }
    ]
  };

  try {
    const createResult = await executeAction('create_presentation', createInputs, {});
    console.log('  ✓ Initial presentation created');

    // Now generate slides from data
    console.log('  - Generating slides from data template...');

    // Quarterly data for 4 quarters
    const quarterlyData = [
      {
        quarter: 'Q1 2024',
        revenue: '$2.5M',
        growth: 15,
        customers: 450,
        target: '$3M',
        regions: [
          { name: 'North America', amount: '$1.2M', pct: '48%' },
          { name: 'Europe', amount: '$800K', pct: '32%' },
          { name: 'Asia Pacific', amount: '$500K', pct: '20%' }
        ],
        topProducts: [
          { name: 'Product A', sales: '$900K' },
          { name: 'Product B', sales: '$800K' },
          { name: 'Product C', sales: '$500K' }
        ],
        summary: 'Strong start to the year with 15% growth'
      },
      {
        quarter: 'Q2 2024',
        revenue: '$3.1M',
        growth: 24,
        customers: 520,
        target: '$3.5M',
        regions: [
          { name: 'North America', amount: '$1.5M', pct: '48%' },
          { name: 'Europe', amount: '$1M', pct: '32%' },
          { name: 'Asia Pacific', amount: '$600K', pct: '19%' }
        ],
        topProducts: [
          { name: 'Product A', sales: '$1.1M' },
          { name: 'Product B', sales: '$1M' },
          { name: 'Product C', sales: '$600K' }
        ],
        summary: 'Exceeded expectations with 24% growth'
      },
      {
        quarter: 'Q3 2024',
        revenue: '$3.8M',
        growth: 35,
        customers: 610,
        target: '$4M',
        regions: [
          { name: 'North America', amount: '$1.8M', pct: '47%' },
          { name: 'Europe', amount: '$1.3M', pct: '34%' },
          { name: 'Asia Pacific', amount: '$700K', pct: '18%' }
        ],
        topProducts: [
          { name: 'Product A', sales: '$1.4M' },
          { name: 'Product B', sales: '$1.2M' },
          { name: 'Product C', sales: '$800K' }
        ],
        summary: 'Record-breaking quarter with strong customer growth'
      },
      {
        quarter: 'Q4 2024',
        revenue: '$4.5M',
        growth: 42,
        customers: 720,
        target: '$5M',
        regions: [
          { name: 'North America', amount: '$2.1M', pct: '47%' },
          { name: 'Europe', amount: '$1.6M', pct: '36%' },
          { name: 'Asia Pacific', amount: '$800K', pct: '18%' }
        ],
        topProducts: [
          { name: 'Product A', sales: '$1.7M' },
          { name: 'Product B', sales: '$1.5M' },
          { name: 'Product C', sales: '$1M' }
        ],
        summary: 'Exceptional year-end performance, nearly hit target'
      }
    ];

    const generateInputs = {
      template: {
        markdown_template: `# {{quarter}} Results

## Key Metrics

- **Revenue:** {{revenue}} ({{growth}}% growth)
- **Customers:** {{customers}}
- **Target:** {{target}}

## Regional Breakdown

| Region | Revenue | % of Total |
|--------|---------|------------|
{{#regions}}
| {{name}} | {{amount}} | {{pct}} |
{{/regions}}

## Top Products

| Product | Sales |
|---------|-------|
{{#topProducts}}
| {{name}} | {{sales}} |
{{/topProducts}}

## Summary

> {{summary}}

**Status:** {{#target}}On track to meet target{{/target}}`
      },
      data: quarterlyData,
      master: 'SALES_MASTER'
    };

    const result = await executeAction('generate_slides', generateInputs, {});

    console.log('✓ Generated slides from data template');
    console.log('  - Slides generated:', result.slides_generated);
    console.log('  - Total slides:', result.total_slides);

    // Save file
    const outputPath = path.join(outputDir, 'test_generated_quarterly_reports.pptx');
    const buffer = Buffer.from(result.file.content, 'base64');
    fs.writeFileSync(outputPath, buffer);
    console.log('  - Saved to:', outputPath);

    return result;
  } catch (error) {
    console.error('✗ Test failed:', error.message);
    throw error;
  }
}

async function testGenerateProductSheets() {
  console.log('\nTest 2: Generate product data sheets...');

  // Create initial presentation
  const createInputs = {
    title: 'Product Catalog',
    slides: [
      {
        markdown: '# Product Catalog 2024\n\n## Our Product Line'
      }
    ]
  };

  try {
    await executeAction('create_presentation', createInputs, {});
    console.log('  ✓ Initial presentation created');

    // Product data
    const products = [
      {
        name: 'Widget Pro',
        sku: 'WDG-PRO-001',
        price: '$299',
        description: 'Professional-grade widget for enterprise use',
        features: [
          { feature: 'Advanced Analytics', available: true },
          { feature: 'Cloud Integration', available: true },
          { feature: 'API Access', available: true },
          { feature: '24/7 Support', available: true }
        ],
        specs: [
          { spec: 'Weight', value: '2.5 lbs' },
          { spec: 'Dimensions', value: '10 x 8 x 3 in' },
          { spec: 'Power', value: '100-240V' }
        ]
      },
      {
        name: 'Widget Lite',
        sku: 'WDG-LTE-001',
        price: '$99',
        description: 'Affordable widget for small businesses',
        features: [
          { feature: 'Basic Analytics', available: true },
          { feature: 'Cloud Integration', available: false },
          { feature: 'API Access', available: false },
          { feature: 'Email Support', available: true }
        ],
        specs: [
          { spec: 'Weight', value: '1.2 lbs' },
          { spec: 'Dimensions', value: '8 x 6 x 2 in' },
          { spec: 'Power', value: '100-240V' }
        ]
      },
      {
        name: 'Widget Enterprise',
        sku: 'WDG-ENT-001',
        price: '$999',
        description: 'Enterprise-grade solution with unlimited scale',
        features: [
          { feature: 'Advanced Analytics', available: true },
          { feature: 'Cloud Integration', available: true },
          { feature: 'API Access', available: true },
          { feature: 'Dedicated Support', available: true }
        ],
        specs: [
          { spec: 'Weight', value: '5 lbs' },
          { spec: 'Dimensions', value: '15 x 12 x 5 in' },
          { spec: 'Power', value: '100-240V' }
        ]
      }
    ];

    const generateInputs = {
      template: {
        markdown_template: `# {{name}}

**SKU:** {{sku}} | **Price:** {{price}}

## Description

{{description}}

## Features

| Feature | Available |
|---------|-----------|
{{#features}}
| {{feature}} | {{#available}}✓{{/available}}{{^available}}✗{{/available}} |
{{/features}}

## Technical Specifications

| Specification | Value |
|---------------|-------|
{{#specs}}
| {{spec}} | {{value}} |
{{/specs}}`
      },
      data: products
    };

    const result = await executeAction('generate_slides', generateInputs, {});

    console.log('✓ Generated product data sheets');
    console.log('  - Slides generated:', result.slides_generated);

    // Save file
    const outputPath = path.join(outputDir, 'test_generated_product_sheets.pptx');
    const buffer = Buffer.from(result.file.content, 'base64');
    fs.writeFileSync(outputPath, buffer);
    console.log('  - Saved to:', outputPath);

    return result;
  } catch (error) {
    console.error('✗ Test failed:', error.message);
    throw error;
  }
}

async function testGenerateManySlides() {
  console.log('\nTest 3: Generate 20 employee profiles (stress test)...');

  const createInputs = {
    title: 'Employee Directory',
    slides: [{ markdown: '# Employee Directory 2024' }]
  };

  try {
    await executeAction('create_presentation', createInputs, {});

    // Generate 20 employee profiles
    const employees = [];
    const departments = ['Engineering', 'Sales', 'Marketing', 'Operations', 'Finance'];
    const levels = ['Junior', 'Mid-Level', 'Senior', 'Lead', 'Director'];

    for (let i = 1; i <= 20; i++) {
      employees.push({
        name: `Employee ${i}`,
        title: `${levels[i % levels.length]} ${departments[i % departments.length]} Specialist`,
        department: departments[i % departments.length],
        email: `employee${i}@company.com`,
        phone: `+1-555-${1000 + i}`,
        hired: `202${i % 5}-0${(i % 12) + 1}-15`,
        skills: [
          `Skill A${i}`,
          `Skill B${i}`,
          `Skill C${i}`
        ]
      });
    }

    const generateInputs = {
      template: {
        markdown_template: `# {{name}}

## {{title}}

**Department:** {{department}}

## Contact Information

- **Email:** {{email}}
- **Phone:** {{phone}}
- **Hired:** {{hired}}

## Key Skills

{{#skills}}
- {{.}}
{{/skills}}`
      },
      data: employees
    };

    const result = await executeAction('generate_slides', generateInputs, {});

    console.log('✓ Generated 20 employee profiles');
    console.log('  - Slides generated:', result.slides_generated);

    const outputPath = path.join(outputDir, 'test_generated_20_slides.pptx');
    const buffer = Buffer.from(result.file.content, 'base64');
    fs.writeFileSync(outputPath, buffer);
    console.log('  - Saved to:', outputPath);

    return result;
  } catch (error) {
    console.error('✗ Test failed:', error.message);
    throw error;
  }
}

async function runAllTests() {
  console.log('=== Testing generate_slides Action (POWER FEATURE) ===\n');

  try {
    await testGenerateQuarterlyReports();
    await testGenerateProductSheets();
    await testGenerateManySlides();

    console.log('\n=== All generate_slides tests passed! ===');
    console.log('💡 This is the most API-efficient feature:');
    console.log('   - Generated 20+ slides in single calls');
    console.log('   - Traditional approach would need 100+ API calls');
    console.log('   - Efficiency gain: 50-100x fewer calls!');
  } catch (error) {
    console.error('\n=== Tests failed ===');
    process.exit(1);
  }
}

if (require.main === module) {
  runAllTests();
}

module.exports = { runAllTests };
