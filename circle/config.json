{
  "name": "Circle",
  "display_name": "Circle",
  "version": "1.0.0",
  "description": "Circle community platform integration for managing posts, members, spaces, and events",
  "entry_point": "circle.py",
  "auth": {
    "type": "custom",
    "title": "Circle",
    "fields": {
      "type": "object",
      "properties": {
        "api_token": {
          "type": "string",
          "format": "password",
          "label": "API Token",
          "help_text": "The bearer token for the Circle.so Admin API, find this at Developers -> Tokens"
        }
      }
    }
  },
  "actions": {
    "search_posts": {
      "display_name": "Search Posts",
      "description": "Search for posts in the community by keyword, tag, or space",
      "input_schema": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "Search query to find posts by title or content"
          },
          "space_id": {
            "type": "string",
            "description": "Filter posts by specific space ID"
          },
          "tag": {
            "type": "string",
            "description": "Filter posts by tag"
          },
          "status": {
            "type": "string",
            "description": "Filter by post status",
            "enum": ["published", "draft", "archived"]
          },
          "per_page": {
            "type": "integer",
            "description": "Number of posts to return (default: 10)",
            "default": 10
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "posts": {
            "type": "array",
            "description": "List of matching posts"
          },
          "count": {
            "type": "integer",
            "description": "Total number of posts found"
          },
          "result": {
            "type": "boolean",
            "description": "Whether the operation was successful"
          }
        }
      }
    },
    "get_post": {
      "display_name": "Get Post",
      "description": "Get details of a specific post",
      "input_schema": {
        "type": "object",
        "properties": {
          "post_id": {
            "type": "string",
            "description": "The post ID to retrieve"
          }
        },
        "required": ["post_id"]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "post": {
            "type": "object",
            "description": "Post details including title, body, author, and metadata"
          },
          "result": {
            "type": "boolean",
            "description": "Whether the operation was successful"
          }
        }
      }
    },
    "create_post": {
    "display_name": "Create Post",
    "description": "Create a new post in a space",
    "input_schema": {
    "type": "object",
    "properties": {
    "space_id": {
    "type": "integer",
    "description": "The space ID where the post will be created"
    },
    "name": {
    "type": "string",
    "description": "Post title"
    },
    "body": {
    "type": "string",
    "description": "Post content in markdown format. Supports: **bold**, *italic*, ~~strikethrough~~, `code`, [links](url), # headings, lists (nested), > blockquotes, ```code blocks```, and more."
    },
    "status": {
    "type": "string",
    "description": "Post status",
    "enum": ["published", "draft", "scheduled"],
    "default": "published"
    },
    "is_pinned": {
    "type": "boolean",
    "description": "Whether to pin the post",
    "default": false
    },
    "is_comments_enabled": {
    "type": "boolean",
    "description": "Whether to enable comments",
    "default": true
    },
        "user_email": {
            "type": "string",
                "description": "Email of the user to create the post as (optional, defaults to authenticated user)"
                    }
                },
                "required": ["space_id", "name", "body"]
            },
      "output_schema": {
        "type": "object",
        "properties": {
          "post": {
            "type": "object",
            "description": "Created post details"
          },
          "result": {
            "type": "boolean",
            "description": "Whether the operation was successful"
          }
        }
      }
    },
    "update_post": {
      "display_name": "Update Post",
      "description": "Update an existing post",
      "input_schema": {
        "type": "object",
        "properties": {
          "post_id": {
            "type": "string",
            "description": "The post ID to update"
          },
          "name": {
            "type": "string",
            "description": "Updated post title"
          },
          "body": {
            "type": "string",
            "description": "Updated post content"
          },
          "status": {
            "type": "string",
            "description": "Updated post status",
            "enum": ["published", "draft", "archived"]
          },
          "is_pinned": {
            "type": "boolean",
            "description": "Whether to pin the post"
          }
        },
        "required": ["post_id"]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "post": {
            "type": "object",
            "description": "Updated post details"
          },
          "result": {
            "type": "boolean",
            "description": "Whether the operation was successful"
          }
        }
      }
    },
    "search_member_by_email": {
    "display_name": "Search Member by Email",
    "description": "Find a specific community member by their email address",
    "input_schema": {
    "type": "object",
    "properties": {
    "email": {
    "type": "string",
    "description": "Email address of the member to find"
    }
    },
    "required": ["email"]
    },
    "output_schema": {
    "type": "object",
    "properties": {
    "member": {
    "type": "object",
    "description": "Member details if found"
    },
        "result": {
            "type": "boolean",
                "description": "Whether the operation was successful"
            }
    }
    }
    },
    "list_members": {
    "display_name": "List Members",
    "description": "List community members with optional filtering by status",
    "input_schema": {
    "type": "object",
    "properties": {
    "status": {
        "type": "string",
    "description": "Filter by member status",
    "enum": ["active", "inactive", "pending"]
    },
        "per_page": {
                "type": "integer",
                    "description": "Number of members to return (default: 10)",
                        "default": 10
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number for pagination (default: 1)",
                        "default": 1
                    }
                },
                "required": []
            },
            "output_schema": {
                "type": "object",
                "properties": {
                    "members": {
                        "type": "array",
                        "description": "List of members"
                    },
                    "count": {
                        "type": "integer",
                        "description": "Total number of members"
                    },
                    "result": {
                        "type": "boolean",
                        "description": "Whether the operation was successful"
                    }
                }
            }
        },
    "get_member": {
      "display_name": "Get Member",
      "description": "Get details of a specific community member",
      "input_schema": {
        "type": "object",
        "properties": {
          "member_id": {
            "type": "string",
            "description": "The member ID to retrieve"
          }
        },
        "required": ["member_id"]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "member": {
            "type": "object",
            "description": "Member details including profile, activity, and membership info"
          },
          "result": {
            "type": "boolean",
            "description": "Whether the operation was successful"
          }
        }
      }
    },
    "search_spaces": {
      "display_name": "Search Spaces",
      "description": "Search for spaces (groups/categories) in the community",
      "input_schema": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "Search query to find spaces by name"
          },
          "space_type": {
            "type": "string",
            "description": "Filter by space type",
            "enum": ["post", "event", "chat", "course"]
          },
          "per_page": {
            "type": "integer",
            "description": "Number of spaces to return (default: 10)",
            "default": 10
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "spaces": {
            "type": "array",
            "description": "List of matching spaces"
          },
          "count": {
            "type": "integer",
            "description": "Total number of spaces found"
          },
          "result": {
            "type": "boolean",
            "description": "Whether the operation was successful"
          }
        }
      }
    },
    "get_space": {
      "display_name": "Get Space",
      "description": "Get details of a specific space",
      "input_schema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "The space ID to retrieve"
          }
        },
        "required": ["space_id"]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "space": {
            "type": "object",
            "description": "Space details including name, type, and settings"
          },
          "result": {
            "type": "boolean",
            "description": "Whether the operation was successful"
          }
        }
      }
    },
    "search_events": {
      "display_name": "Search Events",
      "description": "Search for upcoming or past events in the community",
      "input_schema": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "Search query to find events by name"
          },
          "time_filter": {
            "type": "string",
            "description": "Filter events by time",
            "enum": ["upcoming", "past", "all"],
            "default": "upcoming"
          },
          "space_id": {
            "type": "string",
            "description": "Filter events by specific space ID"
          },
          "per_page": {
            "type": "integer",
            "description": "Number of events to return (default: 10)",
            "default": 10
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "description": "List of matching events"
          },
          "count": {
            "type": "integer",
            "description": "Total number of events found"
          },
          "result": {
            "type": "boolean",
            "description": "Whether the operation was successful"
          }
        }
      }
    },
    "get_event": {
      "display_name": "Get Event",
      "description": "Get details of a specific event",
      "input_schema": {
        "type": "object",
        "properties": {
          "event_id": {
            "type": "string",
            "description": "The event ID to retrieve"
          }
        },
        "required": ["event_id"]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "event": {
            "type": "object",
            "description": "Event details including date, location, attendees, and description"
          },
          "result": {
            "type": "boolean",
            "description": "Whether the operation was successful"
          }
        }
      }
    },
    "create_comment": {
      "display_name": "Create Comment",
      "description": "Add a comment to a post",
      "input_schema": {
        "type": "object",
        "properties": {
          "post_id": {
            "type": "string",
            "description": "The post ID to comment on"
          },
          "body": {
            "type": "string",
            "description": "Comment content"
          }
        },
        "required": ["post_id", "body"]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "object",
            "description": "Created comment details"
          },
          "result": {
            "type": "boolean",
            "description": "Whether the operation was successful"
          }
        }
      }
    },
    "get_post_comments": {
      "display_name": "Get Post Comments",
      "description": "Retrieve comments for a specific post",
      "input_schema": {
        "type": "object",
        "properties": {
          "post_id": {
            "type": "string",
            "description": "The post ID to get comments from"
          },
          "per_page": {
            "type": "integer",
            "description": "Number of comments to return (default: 20)",
            "default": 20
          }
        },
        "required": ["post_id"]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "comments": {
            "type": "array",
            "description": "List of comments"
          },
          "count": {
            "type": "integer",
            "description": "Total number of comments"
          },
          "result": {
            "type": "boolean",
            "description": "Whether the operation was successful"
          }
        }
      }
    },
    "get_community_info": {
      "display_name": "Get Community Info",
      "description": "Get information about the community",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "community": {
            "type": "object",
            "description": "Community details including name, settings, and statistics"
          },
          "result": {
            "type": "boolean",
            "description": "Whether the operation was successful"
          }
        }
      }
    }
  }
}
